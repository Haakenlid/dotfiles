#
#  React and javascript snippets
#

global !p
from snippet_helpers import *
def expand_proptypes(props):
	if not props:
		return ''
	pattern = '{}: React.PropTypes.any'
	props = (prop.strip() for prop in props.split(','))
	return ',\n  '.join(pattern.format(prop) for prop in props)
endglobal

snippet cs "React.addons.classSet" b
var cx = React.addons.classSet;
endsnippet

snippet cdm "component did mount" b
componentDidMount: function() {
	${1}
},$0
endsnippet

snippet cdup "component did update" b
componentDidUpdate: function(prevProps, prevState) {
	${1}
},$0
endsnippet

snippet cwm "component will mount" b
componentWillMount: function() {
	${1}
},$0
endsnippet

snippet cwr "component will receive props" b
componentWillReceiveProps: function(nextProps) {
	${1}
},$0
endsnippet

snippet cwun "component will unmount" b
componentWillUnmount: function() {
	${1}
},$0
endsnippet

snippet cwu "component will update" b
componentWillUpdate: function(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet cx
cx({
	${1}: ${2}
});
endsnippet

snippet fup
forceUpdate(${1:callback});
endsnippet

snippet gdp "get default props" b
getDefaultProps: function() {
	return {
		${1}
	};
},$0
endsnippet

snippet gis "get initial state" b
getInitialState: function() {
	return {
		${1}: ${2}
	};
},$0
endsnippet

snippet ism "is mounted"
isMounted()
endsnippet

snippet import "import es6" bA
import ${1:package} from '${2:$1}'
endsnippet

snippet jsx "define jsx dom" b
import React from 'react'

const ${1:`!p snip.rv = path_to_component_name(path, pascal_case_basename)`} = ({ $2 }) => (
	<${4:div}>
		${VISUAL}$5
	</$4>
)
$1.propTypes = {
	`!p snip.rv = expand_proptypes(t[2])`
}
$0
export default $1 
endsnippet

snippet pt "propTypes" b
propTypes: {
	${1}: React.PropTypes.${2:string}
},
endsnippet

snippet rcc "create class/component" b
var ${1:ClassName} = React.createClass({

	render: function() {
		return (
			${VISUAL}$2
		);
	}
});
$0
endsnippet

snippet ren
render: function() {
	return (
		${1:<div />}
	);
}$0
endsnippet

snippet sst "set state" b
this.setState({
	${1}: ${2}
});$0
endsnippet

snippet scu "should component update"
shouldComponentUpdate: function(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet props "get property" i
this.props.${1}
endsnippet

snippet state "get state" i
this.state.${1}
endsnippet

snippet trp
this.transferPropsTo(${VISUAL}$0);
endsnippet

snippet cc "createClass" b
export default class ${1:`!p snip.rv = path_to_component_name(path,
pascal_case_basename)`} extends React.Component {
	render() {
		return (
			$0
		);
	}
}
endsnippet

snippet con "constructor()" b
constructor(props) {
	super(props);
	$0
}
endsnippet

snippet Pt "PropTypes" w
PropTypes.$1`!p snip.rv=complete(t[1], ['array', 'bool', 'func', 'number', 'object', 'string', 'node', 'element', 'instanceOf', 'oneOf([])', 'oneOfType([])', 'arrayOf()', 'objectOf()', 'shape({})', 'any'])`,$0
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate(nextProps, nextState) {
	return ${1:true};
}
endsnippet

snippet <> "<Component>" b
<${1:`!p snip.rv = path_to_component_name(path, pascal_case_basename)`}>
	${0:${VISUAL}}
</$1>
endsnippet

snippet < "<Component />" b
<${1:`!p snip.rv = path_to_component_name(path, pascal_case_basename)`} ${0}/>
endsnippet

# DOM

snippet div "<div>" b
<div$1>
	${0:${VISUAL}}
</div>
endsnippet

# Diffux-CI
snippet dd "diffux.define" b
diffux.define('${1:<`!p snip.rv = path_to_component_name(path, pascal_case_basename)`>}', function() {
	return Utils.renderAttachedAndGetNode(
		${0:${VISUAL}}
	);
}, { viewports: [${2:'small', 'medium'}] });
endsnippet
priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "Function assigned to var"
${1:var }${2:function_name} = function $2(${3}) {
	${VISUAL}$0
};
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function(${1:window}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

# Snippets for Console Debug Output

snippet ca "console.assert" b
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cclear "console.clear" b
console.clear();
endsnippet

snippet cdir "console.dir" b
console.dir(${1:object});
endsnippet

snippet cdirx "console.dirxml" b
console.dirxml(${1:object});
endsnippet

snippet ce "console.error" b
console.error(${1:"${2:value}"});
endsnippet

snippet cgroup "console.group" b
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed" b
console.groupCollapsed("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ci "console.info" b
console.info(${1:"${2:value}"});
endsnippet

snippet cl "console.log" b
console.log(${1:"${2:value}"});
endsnippet

snippet cd "console.debug" b
console.debug(${1:"${2:value}"});
endsnippet

snippet cprof "console.profile" b
console.profile("${1:label}");
${VISUAL}$0
console.profileEnd();
endsnippet

snippet ctable "console.table" b
console.table(${1:"${2:value}"});
endsnippet

snippet ctime "console.time" b
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp" b
console.timeStamp("${1:label}");
endsnippet

snippet ctrace "console.trace" b
console.trace();
endsnippet

snippet cw "console.warn" b
console.warn(${1:"${2:value}"});
endsnippet

